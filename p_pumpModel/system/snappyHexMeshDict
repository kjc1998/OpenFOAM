/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       false; // for boundary layer purpose

geometry
{
    rotatingAMI.stl{ type triSurfaceMesh; name rotatingAMI;}
    housing.stl{ type triSurfaceMesh; name housing;}
    impeller.stl{ type triSurfaceMesh; name impeller;}
    cover.stl{ type triSurfaceMesh; name cover;}
}

castellatedMeshControls
{
    maxLocalCells 100000;
    maxGlobalCells 10000000;
    minRefinementCells 0;
    maxLoadUnbalance 0.10;
    nCellsBetweenLevels 2;

    features
    (
        { file "cover.eMesh"; level 0;} 
        { file "housing.eMesh"; level 0;}
        { file "impeller.eMesh"; level 2;}
        { file "rotatingAMI.eMesh"; level 2;}
    );

    // default to patch wall when patch info is not given
    refinementSurfaces
    {
        rotatingAMI
        {
            level (2 4);
            faceType boundary;
            cellZone rotatingZone;	// name of cell zone (for dynamic mesh)
            faceZone rotatingZone;	// name of face zone (for dynamic mesh)
            cellZoneInside inside;
        }
        impeller{ level (3 3);}		// more emphasis on curvature (need to work on boundary layer after)
        housing{ level (1 3);}
        cover{ level (0 0);}
    }

    resolveFeatureAngle 30; // higher adjacent angle will be marked for refinement

    refinementRegions
    {
        // better mesh quality for whole body refinement
        rotatingAMI
        {
            mode inside;
            levels ((1E15 2));
        }
	
   }

    locationInMesh (2 173 0);
    allowFreeStandingZoneFaces false;
}

snapControls
{
    nSmoothPatch 3;
    tolerance 4.0;	// maximum relative distance for shifting
    nSolveIter 300; // edge snapping iteration
    nRelaxIter 5;
    nFeatureSnapIter 10;
    implicitFeatureSnap true; // dependent on resolve angle
    explicitFeatureSnap false;  // default (using extracted feature edges)
    multiRegionFeatureSnap false; // detect features between surfaces
}

addLayersControls
{
    relativeSizes true;

    layers
    {
    }

    expansionRatio 1.0;
    finalLayerThickness 0.3;
    minThickness 0.1;
    nGrow 0;
    featureAngle 30;
    nRelaxIter 3;
    nSmoothSurfaceNormals 1;
    nSmoothNormals 3;
    nSmoothThickness 10;
    maxFaceThicknessRatio 0.5;
    maxThicknessToMedialRatio 0.3;
    minMedialAxisAngle 90;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;
}

meshQualityControls
{
    maxNonOrtho 65;
    maxBoundarySkewness 20;
    maxInternalSkewness 4;
    maxConcave 80;
    minVol 1e-13;		// no negative volume
    minTetQuality -1;	// not checking tet mesh quality
    minArea -1;
    minTwist 0.01;
    minDeterminant 0.001;
    minFaceWeight 0.05;
    minVolRatio 0.01;
    minTriangleTwist -1;
    nSmoothScale 4;
    errorReduction 0.75;
    relaxed
    {
        maxNonOrtho 75;
    }
}

mergeTolerance 1e-6;

// ************************************************************************* //
